AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  recycle-service

  SAM Template for recycle-service

# Parameter section
Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name (dev, test, prod)
    AllowedValues:
      - dev
      - test
      - prod

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 20
    MemorySize: 512
    Runtime: java21
    LoggingConfig:
      LogFormat: JSON

Resources:
  # S3 Bucket for storing images
  ImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-image-sharing-bucket"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for recycled images with multi-region and disaster recovery
  RecycleBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-image-recycle-bucket"
      VersioningConfiguration:
        Status: Enabled
      # Enable replication for disaster recovery
      ReplicationConfiguration:
        Role: !GetAtt RecycleBucketReplicationRole.Arn
        Rules:
          - Id: ReplicateEverything
            Status: Enabled
            Prefix: ""
            Destination:
              Bucket: !Sub "arn:aws:s3:::${Environment}-image-recycle-bucket-replica"
              StorageClass: STANDARD_IA
      # Multi-region access points are configured through AWS Management Console or CLI
      # Here we set up the basic configuration for disaster recovery
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 90  # Longer retention for recycled items
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # Replica bucket for disaster recovery
  RecycleBucketReplica:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "${Environment}-image-recycle-bucket-replica"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 90
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # IAM Role for S3 replication
  RecycleBucketReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess

  # DynamoDB Table for image metadata
  MetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${Environment}-image-metadata"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: imageId
          AttributeType: S
      KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: imageId
          KeyType: RANGE
      Tags:
        - Key: Environment
          Value: !Ref Environment

  # API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"
      Tags:
        Environment: !Ref Environment

  # Lambda Functions
  RecycleServiceFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-recycle-service"
      Handler: com.App::handleRequest
      CodeUri: recycle-service/
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /recycle
            Method: get
      Tags:
        Environment: !Ref Environment
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ImageBucket
        - DynamoDBReadPolicy:
            TableName: !Ref MetadataTable

  # Delete Image Handler - Moves images to recycle bin
  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-delete-image"
      Handler: com.DeleteImageHandler::handleRequest
      CodeUri: recycle-service/
      Environment:
        Variables:
          PRIMARY_BUCKET: !Ref ImageBucket
          RECYCLE_BUCKET: !Ref RecycleBucket
          METADATA_TABLE: !Ref MetadataTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /recycle/delete
            Method: post
      Tags:
        Environment: !Ref Environment
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - S3CrudPolicy:
            BucketName: !Ref RecycleBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataTable

  # Recover Image Handler - Recovers images from recycle bin
  RecoverImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-recover-image"
      Handler: com.RecoverImageHandler::handleRequest
      CodeUri: recycle-service/
      Environment:
        Variables:
          PRIMARY_BUCKET: !Ref ImageBucket
          RECYCLE_BUCKET: !Ref RecycleBucket
          METADATA_TABLE: !Ref MetadataTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /recycle/recover
            Method: post
      Tags:
        Environment: !Ref Environment
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - S3CrudPolicy:
            BucketName: !Ref RecycleBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataTable

  # Permanently Delete Image Handler - Permanently deletes images from recycle bin
  PermanentDeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-permanent-delete-image"
      Handler: com.PermanentlyDeleteImageHandler::handleRequest
      CodeUri: recycle-service/
      Environment:
        Variables:
          PRIMARY_BUCKET: !Ref ImageBucket
          RECYCLE_BUCKET: !Ref RecycleBucket
          METADATA_TABLE: !Ref MetadataTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /recycle/permanent-delete
            Method: post
      Tags:
        Environment: !Ref Environment
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - S3CrudPolicy:
            BucketName: !Ref RecycleBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataTable

  # Upload Image Handler - Uploads images to S3 bucket
  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-upload-image"
      Handler: com.UploadImageHandler::handleRequest
      CodeUri: recycle-service/
      Environment:
        Variables:
          PRIMARY_BUCKET: !Ref ImageBucket
          RECYCLE_BUCKET: !Ref RecycleBucket
          METADATA_TABLE: !Ref MetadataTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /images/upload
            Method: post
      Tags:
        Environment: !Ref Environment
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref ImageBucket
        - S3CrudPolicy:
            BucketName: !Ref RecycleBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref MetadataTable

Outputs:
  ApiEndpoint:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}/"

  RecycleServiceFunction:
    Description: Recycle Service Lambda Function ARN
    Value: !GetAtt RecycleServiceFunction.Arn

  DeleteImageFunction:
    Description: Delete Image Lambda Function ARN
    Value: !GetAtt DeleteImageFunction.Arn

  RecoverImageFunction:
    Description: Recover Image Lambda Function ARN
    Value: !GetAtt RecoverImageFunction.Arn

  PermanentDeleteImageFunction:
    Description: Permanent Delete Image Lambda Function ARN
    Value: !GetAtt PermanentDeleteImageFunction.Arn

  UploadImageFunction:
    Description: Upload Image Lambda Function ARN
    Value: !GetAtt UploadImageFunction.Arn

  ImageBucketName:
    Description: Name of the S3 bucket for storing images
    Value: !Ref ImageBucket

  RecycleBucketName:
    Description: Name of the S3 bucket for recycled images
    Value: !Ref RecycleBucket

  MetadataTableName:
    Description: Name of the DynamoDB table for image metadata
    Value: !Ref MetadataTable