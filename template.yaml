AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Integrated Image Processing System with Upload, Processing, Recycling, Authentication, and Health Monitoring

# Parameter section
Parameters:
  Environment:
    Type: String
    Default: test
    Description: Environment name
    AllowedValues:
      - dev
      - test
      - prod

  ImageTableName:
    Type: String
    Default: photo
    Description: Name of the DynamoDB table for storing image metadata

  RetryQueueName:
    Type: String
    Default: image-retry-queue
    Description: Name of the SQS queue for retry processing

  EmailDomain:
    Type: String
    Default: mscv2group2.link
    Description: Verified email domain for sending notifications

  AdminEmail:
    Type: String
    Default: nicholas.oppong@amalitech.com
    Description: Email address to receive health check notifications

  HealthCheckPath:
    Type: String
    Default: /health
    Description: Path for the health check endpoint

  HealthCheckInterval:
    Type: Number
    Default: 30
    Description: Interval between health checks in seconds

  HealthCheckFailureThreshold:
    Type: Number
    Default: 3
    Description: Number of consecutive failed checks before marking unhealthy

  ErrorThreshold:
    Type: Number
    Default: 5
    Description: Number of 5xx errors that will trigger the alarm

  EvaluationPeriod:
    Type: Number
    Default: 5
    Description: Time period in minutes for evaluating errors

  DomainName:
    Type: String
    Default: photo.mscv2group2.link
    Description: Domain name for the API

  HostedZoneId:
    Type: String
    Default: Z07888711CCI43RK69LKQ
    Description: Route 53 Hosted Zone ID

  DRRegion:
    Type: String
    Default: eu-central-1

  PrimaryRegion:
    Type: String
    Default: us-east-1
    Description: The primary region for the DynamoDB table
  BackupSchedule:
    Type: String
    Default: rate(24 hours)
    Description: Schedule expression for backup (e.g., rate(24 hours) or cron(0 1 * * ? *))
  TableName:
    Type: String
    Default: CognitoBackups
    Description: Name of the DynamoDB table for storing backups

Conditions:
  IsDRRegion: !Equals [!Ref AWS::Region, !Ref DRRegion]

Globals:
  Function:
    Timeout: 30
    Runtime: java21
    MemorySize: 512
    Architectures:
      - x86_64
    Environment:
      Variables:
        JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
    LoggingConfig:
      LogFormat: JSON

Resources:
  # API Gateway CloudWatch Role
  ApiGatewayCloudWatchRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Path: /

  # API Gateway Account Settings
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudWatchRole.Arn
  #    DependsOn: ApiGatewayCloudWatchRole

  # Main API Gateway for the entire application
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "image-processing-api-${Environment}"
      StageName: Prod
      EndpointConfiguration:
        Type: REGIONAL
      Domain:
        DomainName: !Ref DomainName
        CertificateArn: !Ref APICertificate
        Route53:
          HostedZoneId: !Ref HostedZoneId
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - image/gif
        - multipart/form-data
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'http://localhost:8080,https://mscv2group2.link,https://dev.d3nsvx32qio5q5.amplifyapp.com'"
        MaxAge: "'3600'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn
            Identity:
              Header: Authorization
        # Important: Add this to ensure OPTIONS requests bypass authorization
        AddDefaultAuthorizerToCorsPreflight: false
      MethodSettings:
        - ResourcePath: "/*"
          HttpMethod: "*"
          MetricsEnabled: true
          DataTraceEnabled: true
          LoggingLevel: INFO
      Tags:
        Environment: !Ref Environment
  #    DependsOn: ApiGatewayAccount

  # SSL Certificate for domain
  APICertificate:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Ref DomainName
      ValidationMethod: DNS
      DomainValidationOptions:
        - DomainName: !Ref DomainName
          HostedZoneId: !Ref HostedZoneId

  # ===== S3 Buckets =====
  StagingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-staging-bucket-${Environment}-${AWS::AccountId}"
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token"
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            AllowedOrigins:
              - "http://localhost:8080"
              - "https://mscv2group2.link"
              - "https://dev.d3nsvx32qio5q5.amplifyapp.com"
            MaxAge: 3600
      LifecycleConfiguration:
        Rules:
          - Id: DeleteAfter30Days
            Status: Enabled
            ExpirationInDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  ProcessedBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-processed-bucket-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token"
            AllowedMethods:
              - GET
              - HEAD
            AllowedOrigins:
              - "http://localhost:8080"
              - "https://mscv2group2.link"
              - "https://dev.d3nsvx32qio5q5.amplifyapp.com"
            MaxAge: 3600
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      ReplicationConfiguration:
        Role: !GetAtt S3ReplicationRole.Arn
        Rules:
          - Id: ReplicationRule1
            Status: Enabled
            Priority: 1
            Destination:
              Bucket: !GetAtt DestinationBucket.Arn
            DeleteMarkerReplication:
              Status: Disabled
            Filter:
              Prefix: ""
      LifecycleConfiguration:
        Rules:
          - Id: AutoDeleteAfter30Days
            Prefix: recycle/
            Status: Enabled
            ExpirationInDays: 30

  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-processed-replica-${Environment}-${AWS::AccountId}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true

  S3ReplicationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: s3.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: S3ReplicationPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObjectVersion
                  - s3:GetObjectVersionAcl
                  - s3:GetObjectVersionTagging
                Resource: !Sub "arn:aws:s3:::image-processed-bucket-${Environment}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - s3:ReplicateObject
                  - s3:ReplicateTags
                  - s3:ReplicateDelete
                Resource: !Sub "arn:aws:s3:::image-processed-replica-${Environment}-${AWS::AccountId}/*"
              - Effect: Allow
                Action:
                  - s3:ListBucket
                  - s3:GetBucketVersioning
                  - s3:PutBucketVersioning
                Resource:
                  - !Sub "arn:aws:s3:::image-processed-bucket-${Environment}-${AWS::AccountId}"
                  - !Sub "arn:aws:s3:::image-processed-replica-${Environment}-${AWS::AccountId}"

  DestinationBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DestinationBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !GetAtt S3ReplicationRole.Arn
            Action:
              - s3:ReplicateObject
              - s3:ReplicateTags
              - s3:ReplicateDelete
            Resource: !Sub "arn:aws:s3:::image-processed-replica-${Environment}-${AWS::AccountId}/*"
          - Effect: Allow
            Principal:
              AWS: !GetAtt S3ReplicationRole.Arn
            Action:
              - s3:ListBucket
              - s3:GetBucketVersioning
            Resource: !Sub "arn:aws:s3:::image-processed-replica-${Environment}-${AWS::AccountId}"


  # ===== DynamoDB Tables =====
  PhotoTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Ref ImageTableName
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      AttributeDefinitions:
        - AttributeName: userId
          AttributeType: S
        - AttributeName: imageKey
          AttributeType: S
        - AttributeName: imageUrl
          AttributeType: S
        - AttributeName: status
          AttributeType: S
      KeySchema:
        - AttributeName: imageKey
          KeyType: HASH
        - AttributeName: imageUrl
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: UserIdIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
        - IndexName: OwnerStatusIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
      Replicas:
        - Region: !Ref PrimaryRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: !Ref DRRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true


  # DynamoDB Global Table for backup data
  BackupTable:
    Type: AWS::DynamoDB::GlobalTable
    Properties:
      TableName: !Ref TableName
      BillingMode: PAY_PER_REQUEST
      StreamSpecification:
        StreamViewType: NEW_AND_OLD_IMAGES
      Replicas:
        - Region: !Ref PrimaryRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
        - Region: !Ref DRRegion
          PointInTimeRecoverySpecification:
            PointInTimeRecoveryEnabled: true
      TimeToLiveSpecification:
        AttributeName: ExpiryTime
        Enabled: true
      AttributeDefinitions:
        - AttributeName: BackupId
          AttributeType: S
        - AttributeName: ChunkId
          AttributeType: S
        - AttributeName: BackupType
          AttributeType: S
        - AttributeName: Timestamp
          AttributeType: S
      KeySchema:
        - AttributeName: BackupId
          KeyType: HASH
        - AttributeName: ChunkId
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: TypeTimestampIndex
          KeySchema:
            - AttributeName: BackupType
              KeyType: HASH
            - AttributeName: Timestamp
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  CognitoBackupRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: CognitoBackupPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:DescribeUserPool
                  - cognito-idp:ListUsers
                  - cognito-idp:ListUsersInGroup
                  - cognito-idp:ListGroups
                Resource: !Sub "arn:aws:cognito-idp:*:${AWS::AccountId}:userpool/*"
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt BackupTable.Arn

  CognitoBackupFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: cognito-service/
      Handler: com.amalitechphotoappcognitoauth.handlers.BackupHandler::handleRequest
      Timeout: 300
      Role: !GetAtt CognitoBackupRole.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref CognitoUserPool
          BACKUP_TABLE: !Ref TableName
      Events:
        ScheduledBackup:
          Type: Schedule
          Properties:
            Schedule: !Ref BackupSchedule
            Name: CognitoBackupSchedule
            Description: Scheduled execution of Cognito backup
            Enabled: true

  # CloudWatch Logs for monitoring
  BackupLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CognitoBackupFunction}"
      RetentionInDays: 14



  # ===== SQS Queues =====
  RetryQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref RetryQueueName
      VisibilityTimeout: 300
      MessageRetentionPeriod: 345600
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt DeadLetterQueue.Arn
        maxReceiveCount: 5

  DLQRedriveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SQSRedrivePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt DeadLetterQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource: !GetAtt RetryQueue.Arn



  DeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${RetryQueueName}-dlq"
      MessageRetentionPeriod: 1209600

  WelcomeEmailDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AWS::StackName}-WelcomeEmailDLQ"

  # ===== SNS Topics =====
  PostConfirmationSNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Sub "${AWS::StackName}-PostConfirmationTopic"

  PostConfirmationSNSPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref PostConfirmationSNSTopic
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cognito-idp.amazonaws.com
            Action:
              - sns:Publish
            Resource: !GetAtt PostConfirmationSNSTopic.TopicArn


  HealthAlertTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Photo App Health Check Alerts
      TopicName: !Sub ${AWS::StackName}-health-alerts

  HealthAlertTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudwatch.amazonaws.com
            Action: sns:Publish
            Resource: !Ref HealthAlertTopic
      Topics:
        - !Ref HealthAlertTopic

  HealthAlertEmailSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      Protocol: email
      TopicArn: !Ref HealthAlertTopic
      Endpoint: !Ref AdminEmail

  # ===== Cognito Resources =====
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub PhotoAppUserPool-${Environment}
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      MfaConfiguration: "OFF"
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      LambdaConfig:
        PostConfirmation: !GetAtt WelcomeEmailLambda.Arn
        PostAuthentication: !GetAtt SigninAlertLambda.Arn
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Priority: 1
            Name: verified_email

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: !Sub PhotoAppAppClient-${Environment}
      GenerateSecret: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      SupportedIdentityProviders:
        - COGNITO
      CallbackURLs:
        - !Sub https://mscv2group2.link/auth/callback
      LogoutURLs:
        - !Sub https://mscv2group2.link/auth/logout
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - phone
        - email
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      ReadAttributes:
        - email
        - name
      WriteAttributes:
        - email
        - name

  CognitoDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub photo-app-auth-${Environment}-${AWS::AccountId}
      UserPoolId: !Ref CognitoUserPool

  # ===== Lambda Functions: Upload and Processing =====
  UploadImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "image-upload-function-${Environment}"
      CodeUri: upload-service
      Handler: com.App::handleRequest
      Description: Handles image uploads via API Gateway
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucket
          QUEUE_URL: !Ref RetryQueueName
          ENVIRONMENT: !Ref Environment
      Role: !GetAtt UploadFunctionRole.Arn
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /upload
            Method: post

  ProcessImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "image-processing-function-${Environment}"
      CodeUri: processing-service
      Handler: com.process.handler.ProcessImageHandler::handleRequest
      Description: Processes images from the retry queue
      Environment:
        Variables:
          STAGING_BUCKET: !Ref StagingBucket
          PROCESSED_BUCKET: !Ref ProcessedBucket
          IMAGE_TABLE: !Ref ImageTableName
          ENVIRONMENT: !Ref Environment
      Role: !GetAtt ProcessFunctionRole.Arn
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt RetryQueue.Arn
            BatchSize: 10


  # Lambda Function for DLQ Redrive
  DLQRedriveFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-dlq-redrive-function"
      CodeUri: processing-service
      Handler: com.process.handler.DLQRedriveHandler::handleRequest
      Description: Moves messages from DLQ back to main retry queue with delay
      Runtime: java21
      MemorySize: 512
      Timeout: 300
      Environment:
        Variables:
          DLQ_URL: !Ref DeadLetterQueue
          RETRY_QUEUE_URL: !Ref RetryQueue
          MAX_MESSAGES_TO_REDRIVE: 100
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Role: !GetAtt DLQRedriveRole.Arn
      Events:
        ScheduledEvent:
          Type: Schedule
          Properties:
            Schedule: rate(1 hour)
            Enabled: true
            Description: "Schedule for DLQ redrive processing"

  DLQMessagesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-dlq-messages-alarm"
      AlarmDescription: "Alarm when messages accumulate in the Dead Letter Queue"
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt DeadLetterQueue.QueueName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  # ===== Lambda Functions: Image Sharing =====
  GetActiveImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-get-active-images"
      Handler: handler.GetActiveImagesHandler::handleRequest
      CodeUri: listing-service/
      Environment:
        Variables:
          PROCESSED_IMAGES_BUCKET: !Ref ProcessedBucket
          IMAGE_TABLE: !Ref ImageTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotoTable
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}/images/active
            Method: get
      Tags:
        Environment: !Ref Environment

  GetDeletedImagesFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-get-deleted-images"
      Handler: handler.GetDeletedImagesHandler::handleRequest
      CodeUri: listing-service/
      Environment:
        Variables:
          PROCESSED_IMAGES_BUCKET: !Ref ProcessedBucket
          IMAGE_TABLE: !Ref ImageTableName
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PhotoTable
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucket
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /users/{userId}/images/deleted
            Method: get
      Tags:
        Environment: !Ref Environment

  ShareImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-share-image"
      Handler: handler.ShareImageHandler::handleRequest
      CodeUri: listing-service/
      Environment:
        Variables:
          PROCESSED_IMAGES_BUCKET: !Ref ProcessedBucket
          IMAGE_TABLE: !Ref ImageTableName
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref ProcessedBucket
        - DynamoDBReadPolicy:
            TableName: !Ref PhotoTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /images/share
            Method: post
      Tags:
        Environment: !Ref Environment

  # ===== Lambda Functions: Recycle Bin Feature =====
  DeleteImageFunction:
     Type: AWS::Serverless::Function
     Properties:
       FunctionName: !Sub "image-delete-function-${Environment}"
       CodeUri: recycle-service/
       Handler: com.handlers.DeleteImageHandler::handleRequest
       Description: Moves images to the recycle bin
       Environment:
         Variables:
           PRIMARY_BUCKET: !Ref ProcessedBucket
           IMAGE_TABLE: !Ref ImageTableName
           ENVIRONMENT: !Ref Environment
       Policies:
         - DynamoDBCrudPolicy:
             TableName: !Ref PhotoTable
         - S3CrudPolicy:
             BucketName: !Ref ProcessedBucket

       Events:
         ApiEvent:
           Type: Api
           Properties:
             RestApiId: !Ref ApiGateway
             Path: /images/{imageKey}/delete
             Method: post

  RecoverImageFunction:
     Type: AWS::Serverless::Function
     Properties:
       FunctionName: !Sub "image-recover-function-${Environment}"
       CodeUri: recycle-service/
       Handler: com.handlers.RecoverImageHandler::handleRequest
       Description: Restores images from the recycle bin
       Environment:
         Variables:
           PRIMARY_BUCKET: !Ref ProcessedBucket
           IMAGE_TABLE: !Ref ImageTableName
           ENVIRONMENT: !Ref Environment
       Policies:
         - DynamoDBCrudPolicy:
             TableName: !Ref PhotoTable
         - S3CrudPolicy:
             BucketName: !Ref ProcessedBucket

       Events:
         ApiEvent:
           Type: Api
           Properties:
             RestApiId: !Ref ApiGateway
             Path: /images/{imageKey}/restore
             Method: post

  PermanentlyDeleteImageFunction:
     Type: AWS::Serverless::Function
     Properties:
       FunctionName: !Sub "image-permanent-delete-function-${Environment}"
       CodeUri: recycle-service/
       Handler: com.handlers.PermanentlyDeleteImageHandler::handleRequest
       Description: Permanently deletes images from the recycle bin
       Environment:
         Variables:
           IMAGE_TABLE: !Ref ImageTableName
           RECYCLE_BUCKET: !Ref ProcessedBucket
           ENVIRONMENT: !Ref Environment
       Policies:
         - DynamoDBCrudPolicy:
             TableName: !Ref PhotoTable
         - S3CrudPolicy:
             BucketName: !Ref ProcessedBucket
       Events:
         ApiEvent:
           Type: Api
           Properties:
             RestApiId: !Ref ApiGateway
             Path: /images/{imageKey}/permanent-delete
             Method: delete

  # ===== Lambda Functions: Authentication =====

  WelcomeEmailLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub photo-App-welcome-email-${Environment}
      Handler: com.amalitechphotoappcognitoauth.handlers.WelcomeEmailHandler::handleRequest
      Runtime: java21
      CodeUri: cognito-service/
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          EMAIL_SOURCE: "noreply@mscv2group2.link"
          ENVIRONMENT: !Ref Environment
          APP_URL: !Sub https://mscv2group2.link
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${EmailDomain}"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  SigninAlertLambda:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub photo-App-signin-alert-${Environment}
      Handler: com.amalitechphotoappcognitoauth.handlers.SigninAlertHandler::handleRequest
      Runtime: java21
      CodeUri: cognito-service/
      MemorySize: 512
      Timeout: 30
      Environment:
        Variables:
          EMAIL_SOURCE: "noreply@mscv2group2.link"
          ENVIRONMENT: !Ref Environment
          APP_URL: !Sub https://mscv2group2.link
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - ses:SendEmail
                - ses:SendRawEmail
              Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${EmailDomain}"
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'

  # ===== Lambda Functions: Health Check =====
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.handlers.healthCheck.HealthCheckHandler::handleRequest
      CodeUri: healthcheck-service/
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:ListTables
                - dynamodb:DescribeTable
              Resource: !GetAtt PhotoTable.Arn
            - Effect: Allow
              Action:
                - s3:ListBuckets
                - s3:ListAllMyBuckets
                - s3:GetBucketLocation
                - s3:HeadBucket
              Resource:
                - !Sub "arn:aws:s3:::${StagingBucket}"
                - !Sub "arn:aws:s3:::${ProcessedBucket}"
            - Effect: Allow
              Action:
                - cognito-idp:ListUserPools
              Resource: !GetAtt CognitoUserPool.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health
            Method: get
            Auth:
              Authorizer: NONE

  ComponentHealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.handlers.healthCheck.ComponentHealthCheckHandler::handleRequest
      CodeUri: healthcheck-service/
      Environment:
        Variables:
          IMAGE_TABLE_NAME: !Ref ImageTableName
          COGNITO_USER_POOL_ID: !Ref CognitoUserPool
          PROCESSED_BUCKET: !Ref ProcessedBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:ListTables
                - dynamodb:DescribeTable
              Resource: !GetAtt PhotoTable.Arn
            - Effect: Allow
              Action:
                - s3:ListBuckets
                - s3:ListAllMyBuckets
                - s3:GetBucketLocation
                - s3:HeadBucket
                - s3:GetBucketAcl
                - s3:GetBucketPolicy
                - s3:GetBucketVersioning
                - s3:GetBucketTagging
                - s3:ListBucket
              Resource: 
                - !Sub "arn:aws:s3:::${ProcessedBucket}"
                - !Sub "arn:aws:s3:::${ProcessedBucket}/*"
            - Effect: Allow
              Action:
                - cognito-idp:ListUserPools
                - cognito-idp:DescribeUserPool
              Resource: !GetAtt CognitoUserPool.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: '*'
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /health/component/{component}
            Method: get
            Auth:
              Authorizer: NONE

  # ===== IAM Roles =====
  UploadFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: S3UploadPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${StagingBucket}/*"
        - PolicyName: SQSSendPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                  - sqs:GetQueueUrl
                Resource: !GetAtt RetryQueue.Arn

  ProcessFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaSQSQueueExecutionRole
      Policies:
        - PolicyName: S3ProcessPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub "arn:aws:s3:::${StagingBucket}/*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                Resource: !Sub "arn:aws:s3:::${ProcessedBucket}/*"
        - PolicyName: DynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                Resource: !GetAtt PhotoTable.Arn
        - PolicyName: SESPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendRawEmail
                Resource: !Sub "arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${EmailDomain}"

  # Lambda Permissions for Cognito Triggers
  LambdaInvokePermissionWelcome:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt WelcomeEmailLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  LambdaInvokePermissionSignin:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt SigninAlertLambda.Arn
      Action: lambda:InvokeFunction
      Principal: cognito-idp.amazonaws.com
      SourceArn: !GetAtt CognitoUserPool.Arn

  # ===== Route 53 Health Checks =====
  ApiHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        ResourcePath: !Ref HealthCheckPath
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: !Ref HealthCheckInterval
        FailureThreshold: !Ref HealthCheckFailureThreshold
        MeasureLatency: true
        Inverted: false
        EnableSNI: true
        Regions:
          - us-east-1
          - us-west-1
          - eu-west-1
      HealthCheckTags:
        - Key: Name
          Value: !Sub '${DomainName}-health-check'
        - Key: Environment
          Value: Production
        - Key: Service
          Value: PhotoAPI

  CognitoHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        ResourcePath: /health/component/cognito
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 30
        FailureThreshold: 3
        MeasureLatency: true
        EnableSNI: true
        Regions:
          - us-east-1
          - us-west-1
          - eu-west-1
      HealthCheckTags:
        - Key: Name
          Value: !Sub '${DomainName}-cognito-health-check'
        - Key: Environment
          Value: Production
        - Key: Service
          Value: Cognito

  S3HealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        ResourcePath: /health/component/s3
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 30
        FailureThreshold: 3
        MeasureLatency: true
        EnableSNI: true
        Regions:
          - us-east-1
          - us-west-1
          - eu-west-1
      HealthCheckTags:
        - Key: Name
          Value: !Sub '${DomainName}-s3-health-check'
        - Key: Environment
          Value: Production
        - Key: Service
          Value: S3

  DynamoDBHealthCheck:
    Type: AWS::Route53::HealthCheck
    Properties:
      HealthCheckConfig:
        Port: 443
        Type: HTTPS
        ResourcePath: /health/component/dynamodb
        FullyQualifiedDomainName: !Ref DomainName
        RequestInterval: 30
        FailureThreshold: 3
        MeasureLatency: true
        EnableSNI: true
        Regions:
          - us-east-1
          - us-west-1
          - eu-west-1
      HealthCheckTags:
        - Key: Name
          Value: !Sub '${DomainName}-dynamodb-health-check'
        - Key: Environment
          Value: Production
        - Key: Service
          Value: DynamoDB

  # ===== CloudWatch Alarms =====
  HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DomainName}-health-alarm'
      AlarmDescription: Alarm when API health check fails
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt ApiHealthCheck.HealthCheckId
      AlarmActions:
        - !Ref HealthAlertTopic
      InsufficientDataActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  RecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DomainName}-recovery-alarm'
      AlarmDescription: Alarm when API health check recovers
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt ApiHealthCheck.HealthCheckId
      AlarmActions:
        - !Ref HealthAlertTopic

  ApiGateway5xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DomainName}-5xx-error-alarm'
      AlarmDescription: !Sub 'Alarm when API Gateway experiences more than ${ErrorThreshold} 5xx errors in ${EvaluationPeriod} minutes'
      Namespace: AWS/ApiGateway
      MetricName: 5XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGateway
        - Name: Stage
          Value: Prod
      Statistic: Sum
      Period: 60
      EvaluationPeriods: !Ref EvaluationPeriod
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  ApiGateway4xxErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DomainName}-4xx-error-alarm'
      AlarmDescription: !Sub 'Alarm when API Gateway experiences more than ${ErrorThreshold} 4xx errors in ${EvaluationPeriod} minutes'
      Namespace: AWS/ApiGateway
      MetricName: 4XXError
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGateway
        - Name: Stage
          Value: Prod
      Statistic: Sum
      Period: 60
      EvaluationPeriods: !Ref EvaluationPeriod
      Threshold: !Ref ErrorThreshold
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  ApiGatewayLatencyAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${DomainName}-latency-alarm'
      AlarmDescription: !Sub 'Alarm when API Gateway latency exceeds 1000ms for ${EvaluationPeriod} minutes'
      Namespace: AWS/ApiGateway
      MetricName: Latency
      Dimensions:
        - Name: ApiName
          Value: !Ref ApiGateway
        - Name: Stage
          Value: Prod
      Statistic: Average
      Period: 60
      EvaluationPeriods: !Ref EvaluationPeriod
      Threshold: 1000
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  Route53HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-route53-health-check-alarm
      AlarmDescription: !Sub "Alarm when Route 53 health check fails for ${DomainName}"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt ApiHealthCheck.HealthCheckId
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  ComponentHealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-component-health-check-alarm
      AlarmDescription: "Alarm when component health checks fail"
      MetricName: ComponentHealthCheckStatus
      Namespace: Custom/PhotoApp
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  CognitoHealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-cognito-health-check-alarm
      AlarmDescription: "Alarm when Cognito health check fails"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt CognitoHealthCheck.HealthCheckId
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  S3HealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-s3-health-check-alarm
      AlarmDescription: "Alarm when S3 health check fails"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt S3HealthCheck.HealthCheckId
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

  DynamoDBHealthCheckAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub ${AWS::StackName}-dynamodb-health-check-alarm
      AlarmDescription: "Alarm when DynamoDB health check fails"
      MetricName: HealthCheckStatus
      Namespace: AWS/Route53
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: LessThanThreshold
      Dimensions:
        - Name: HealthCheckId
          Value: !GetAtt DynamoDBHealthCheck.HealthCheckId
      AlarmActions:
        - !Ref HealthAlertTopic
      OKActions:
        - !Ref HealthAlertTopic

Outputs:
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${AWS::StackName}-ApiEndpoint"

  StagingBucketName:
    Description: "Staging bucket name"
    Value: !Ref StagingBucket
    Export:
      Name: !Sub "${AWS::StackName}-StagingBucketName"

  ProcessedBucketName:
    Description: "Processed bucket name"
    Value: !Ref ProcessedBucket
    Export:
      Name: !Sub "${AWS::StackName}-ProcessedBucketName"

  ImageTableName:
    Description: "DynamoDB table for image metadata"
    Value: !Ref PhotoTable
    Export:
      Name: !Sub "${AWS::StackName}-ImageTableName"

  RetryQueueName:
    Description: "SQS queue for retry processing"
    Value: !GetAtt RetryQueue.QueueName
    Export:
      Name: !Sub "${AWS::StackName}-RetryQueueName"

  UserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref CognitoUserPool
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolId"

  UserPoolClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
    Export:
      Name: !Sub "${AWS::StackName}-UserPoolClientId"

  CognitoDomainName:
    Description: "Domain name for the Cognito hosted UI"
    Value: !Sub "https://${CognitoDomain}.auth.${AWS::Region}.amazoncognito.com"
    Export:
      Name: !Sub "${AWS::StackName}-CognitoDomainName"