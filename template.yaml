AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Image recycling bin feature using AWS SAM

Resources:
  # ðŸ”¹ API Gateway
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: image-recycler-api
      StageName: Prod
      BinaryMediaTypes:
        - image/jpeg
        - image/png
        - image/gif
        - multipart/form-data
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
        MaxAge: "'3600'"
      Tags:
        Environment: "dev"
      # Add Dependencies to ensure API methods are created before deployment
      # This is done using SAM's OpenApi extension
      DefinitionBody:
        swagger: '2.0'
        info:
          title: !Ref 'AWS::StackName'
        paths:
          /images/{imageId}/delete:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DeleteImageFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /images/{imageId}/restore:
            post:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${RecoverImageFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy
          /images/{imageId}/permanent-delete:
            delete:
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PermanentlyDeleteImageFunction.Arn}/invocations"
                httpMethod: POST
                type: aws_proxy

  # ðŸ”¹ S3 Bucket for Storing Images
  ProcessedImageBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "image-recycler-bucket-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        IgnorePublicAcls: true
        BlockPublicPolicy: true
        RestrictPublicBuckets: true
      LifecycleConfiguration:
        Rules:
          - Id: AutoDeleteDeletedImages
            Prefix: deleted/
            Status: Enabled
            ExpirationInDays: 30

  # ðŸ”¹ DynamoDB Table for Image Metadata
  ImageMetadataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ImageMetadata
      AttributeDefinitions:
        - AttributeName: ImageId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
        - AttributeName: Status
          AttributeType: S
      KeySchema:
        - AttributeName: ImageId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      GlobalSecondaryIndexes:
        - IndexName: OwnerStatusIndex
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: Status
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      TimeToLiveSpecification:
        AttributeName: DeletedAt
        Enabled: true

  # ðŸ”¹ Lambda Function: Delete Image (Move to Recycle Bin)
  DeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: image-recycler-delete-function
      CodeUri: recycle-service/
      Handler: com.handlers.DeleteImageHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImageMetadataTable
        - S3CrudPolicy:
            BucketName: !Ref ProcessedImageBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref ProcessedImageBucket
          IMAGE_TABLE: !Ref ImageMetadataTable
      # Remove the API Event here since we're using OpenAPI definition

  # ðŸ”¹ Lambda Function: Restore Image from Recycle Bin
  RecoverImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: image-recycler-recover-function
      CodeUri: recycle-service/
      Handler: com.handlers.RecoverImageHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImageMetadataTable
        - S3CrudPolicy:
            BucketName: !Ref ProcessedImageBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref ProcessedImageBucket
          IMAGE_TABLE: !Ref ImageMetadataTable
      # Remove the API Event here since we're using OpenAPI definition

  # ðŸ”¹ Lambda Function: Permanent Deletion
  PermanentlyDeleteImageFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: image-recycler-permanent-delete-function
      CodeUri: recycle-service/
      Handler: com.handlers.PermanentlyDeleteImageHandler::handleRequest
      Runtime: java21
      MemorySize: 512
      Timeout: 10
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ImageMetadataTable
        - S3CrudPolicy:
            BucketName: !Ref ProcessedImageBucket
      Environment:
        Variables:
          BUCKET_NAME: !Ref ProcessedImageBucket
          IMAGE_TABLE: !Ref ImageMetadataTable
      # Remove the API Event here since we're using OpenAPI definition

  # Lambda permissions for API Gateway
  DeleteImagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt DeleteImageFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/images/{imageId}/delete"

  RecoverImagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt RecoverImageFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/images/{imageId}/restore"

  PermanentDeleteImagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt PermanentlyDeleteImageFunction.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/DELETE/images/{imageId}/permanent-delete"

Outputs:
  # API Gateway outputs
  ApiEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  ImageMetadataTableName:
    Description: Name of the DynamoDB table used for image metadata
    Value: !Ref ImageMetadataTable

  ProcessedImageBucketName:
    Description: Name of the S3 bucket where images are stored
    Value: !Ref ProcessedImageBucket